@use "sass:math";

@mixin reset {
  margin: 0;
  padding: 0;
}

@mixin reset-list {
  @include reset;
  list-style: none;
}

@mixin display-none {
  display: none;
}

@mixin border-none {
  border: none;
}

@mixin text-decoration-none {
  text-decoration: none;
}

@mixin outline-none {
  outline: none;
}

@mixin full-width {
  width: 100%;
}

/* Grid */
@mixin make-block($value) {
  display: $value;
}

@mixin add-position($position, $value) {
  #{$position}: convert-to-flex-unit($value);
}

@mixin make-box($width: false, $height: false) {
  @if $width {
    width: convert-to-flex-unit($width);
  }
  @if $height {
    height: convert-to-flex-unit($height);
  }
}

@mixin make-flex($display: flex, $direction: false, $wrap: false) {
  display: $display;
  @if $direction {
    flex-direction: $direction;
  }
  @if $wrap {
    flex-wrap: $wrap;
  }
}

@mixin add-align-elements($justify-content: false, $align-content: false, $align-items: false) {
  @if $justify-content {
    justify-content: $justify-content;
  }
  @if $align-content {
    align-content: $align-content;
  }
  @if $align-items {
    align-items: $align-items;
  }
}

@mixin add-flexibility($grow: 0, $shrink: 1, $basis: auto) {
  flex: $grow $shrink convert-to-flex-unit($basis);
}

@mixin add-gap($column-gap: false, $row-gap: false) {
  @if $column-gap {
    column-gap: convert-to-flex-unit($column-gap);
  }
  @if $row-gap {
    row-gap: convert-to-flex-unit($row-gap);
  }
}

@mixin add-order($order) {
  order: $order;
}

@mixin make-grid-areas($template) {
  display: grid;
  grid-template-areas: $template;
}

@mixin add-grid-area($area: false) {
  @if $area { grid-area: $area; }
}

@mixin add-padding($top: false, $right: false, $bottom: false, $left: false) {
	@if $top { padding-top: convert-to-flex-unit($top); }
  @if $right { padding-right: convert-to-flex-unit($right); }
  @if $bottom { padding-bottom: convert-to-flex-unit($bottom); }
  @if $left { padding-left: convert-to-flex-unit($left); }
}

@mixin add-margin($top: false, $right: false, $bottom: false, $left: false) {
	@if $top { margin-top: convert-to-flex-unit($top); }
  @if $right { margin-right: convert-to-flex-unit($right); }
  @if $bottom { margin-bottom: convert-to-flex-unit($bottom); }
  @if $left { margin-left: convert-to-flex-unit($left); }
}

/* Typography */
@mixin font-face($font-family, $font-file-name, $weight: normal, $style: normal) {
  @font-face {
      font-family: $font-family;
      font-weight: $weight;
      font-style: $style;
      src: url("../assets/fonts/#{$font-file-name}.ttf");
  }
}

@mixin font-size($size: $base-font-size, $height: $size * $base-line-height) {
  font-size: convert-to-flex-unit($size);
  line-height: math.div($height, $size);
}

@mixin typography($list, $size, $device: false) {
  @if $device {
    $value-size: map-get($list, $size);
    @include font-size($value-size...);
  } @else {
    $value-size: map-get($list, $device, $size);
    @include font-size($value-size...);
  }
}

@mixin text-style($color: false, $transform: false, $weight: false) {
  @if $color {
    $value-color: map-get($colors, $color);
    color: $value-color;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $transform {
    text-transform: $transform;
  }
}

@mixin text-align($align: start) {
  text-align: $align;
}

@mixin vertical-align($align: baseline) {
  vertical-align: $align;
}

/* Border style */
@mixin make-border(
  $position: all,
  $size: 1px,
  $pattern: solid,
  $color: "white") {
  $value-color: map-get($colors, $color);

  @if $position == all {
    border: convert-to-flex-unit($size) $pattern $value-color;
  } @else {
    border-#{$position}: convert-to-flex-unit($size) $pattern $value-color;
  }
}

@mixin add-border-radius($radius) {
  border-radius: convert-to-flex-unit($radius);
}

/* Media */
@mixin for-phone {
  @media screen and (max-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@mixin for-desktop {
  @media screen and (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

/* Background style */
@mixin bg-image($name-img) {
  background-image: url("../assets/images/#{$name-img}.png");
  background-position: center;
  background-size: cover;
}

@mixin bg-gradient($test, $gradient) {
  $value-gradient: map-get($gradients, $gradient);
  background: linear-gradient($test, $value-gradient);
}

@mixin generate-color-atoms($list) {
  @each $key, $value in $list {
    .text-#{$key} {
      color: $value;
    }
    .bg-#{$key} {
      background-color: $value;
    }
  }
}
